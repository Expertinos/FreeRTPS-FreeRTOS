#!/usr/bin/env python
import sys, string, subprocess
if len(sys.argv) != 3:
  print "usage: task_runner VERB SYSTEM-APP"
  print "  common verbs: { program, gdb, gdb_server, dump_flash, ... }"
  sys.exit(1)
verb = sys.argv[1]
sys_tokens = string.split(sys.argv[2], '-')
program = sys_tokens[0]
system = string.join(sys_tokens[1:], ('-'))
print "application: [%s]   system: [%s]" % (program, system)
openocd = "/usr/local/bin/openocd -f systems/%s/openocd.cfg" % system
elf = "build/%s/apps/%s/%s.elf" % ( system, program, program )
# switched to programming using ELF now, but maybe BINs will be useful sometime
#image = "build/%s/apps/%s/%s.bin" % ( system, program, program )

if verb == 'program':
  cmd = "%s -c \"init; sleep 100; reset halt; sleep 100; flash write_image erase %s; halt; verify_image %s; sleep 100; reset run; sleep 100; shutdown\"" % (openocd, elf, elf)
elif verb == 'reset':
  cmd = "%s -c \"init; sleep 100; halt; sleep 100; reset run; sleep 100; shutdown\"" % openocd
elif verb == 'gdb_server':
  cmd = "%s -c \"init; halt\"" % openocd
elif verb == 'gdb':
  cmd = "arm-none-eabi-gdb %s -x systems/stm32_common/openocd/gdb_init_commands" % elf
else:
  print "unknown verb: [%s]" % verb
  sys.exit(1)

print "about to execute: [%s]" % cmd
process = subprocess.Popen(cmd, shell=True,
                           stdout=subprocess.PIPE, 
                           stderr=subprocess.STDOUT)
while True:
  line = process.stdout.readline()
  if line == '' and process.poll() != None:
    break # all done
  sys.stdout.write(line)
  sys.stdout.flush()
output = process.communicate()[0]
